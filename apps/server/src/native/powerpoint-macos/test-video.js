const { getPowerPointStatus } = require('./index.js');

console.log('=== TESTANDO CAPTURA DE V√çDEO ===\n');
console.log('Certifique-se de que h√° um v√≠deo rodando em um slide do PowerPoint\n');

try {
    const result = getPowerPointStatus();
    console.log('Resultado completo:', JSON.stringify(result, null, 2));
    
    if (result.isAvailable) {
        console.log('\n‚úÖ PowerPoint detectado!');
        console.log(`üìç Slide atual: ${result.currentSlide}`);
        
        if (result.video) {
            console.log('\nüé¨ INFORMA√á√ïES DO V√çDEO:');
            console.log(`   Tem v√≠deo: ${result.video.hasVideo ? 'Sim' : 'N√£o'}`);
            console.log(`   Est√° reproduzindo: ${result.video.isPlaying ? 'Sim' : 'N√£o'}`);
            
            if (result.video.hasVideo) {
                const duration = result.video.duration;
                const currentTime = result.video.currentTime;
                const remaining = result.video.remainingTime;
                const volume = result.video.volume || 0;
                const muted = result.video.muted || false;
                const fileName = result.video.fileName || '';
                const sourceUrl = result.video.sourceUrl || '';
                
                // Formata em minutos:segundos
                const formatTime = (seconds) => {
                    const mins = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60);
                    return `${mins}:${secs.toString().padStart(2, '0')}`;
                };
                
                const isPlaying = result.video.isPlaying || false;
                
                if (duration > 0) {
                    console.log(`   Dura√ß√£o total: ${duration.toFixed(2)}s`);
                    console.log(`   Tempo atual: ${currentTime.toFixed(2)}s`);
                    console.log(`   ‚è±Ô∏è  Tempo restante: ${remaining.toFixed(2)}s`);
                    console.log(`   üìä Dura√ß√£o: ${formatTime(duration)}`);
                    console.log(`   ‚èØÔ∏è  Atual: ${formatTime(currentTime)}`);
                    console.log(`   ‚è≥ Restante: ${formatTime(remaining)}`);
                    
                    if (currentTime === 0 && isPlaying) {
                        console.log(`   ‚ö†Ô∏è  NOTA: currentTime sempre 0 - limita√ß√£o do PowerPoint para v√≠deos linkados externamente.`);
                        console.log(`      O PowerPoint n√£o exp√µe currentPosition em tempo real para v√≠deos linkados.`);
                        console.log(`      Para rastrear o progresso, considere incorporar o v√≠deo ao inv√©s de apenas link√°-lo.`);
                    }
                } else {
                    console.log(`   ‚ö†Ô∏è  Dura√ß√£o e tempo n√£o dispon√≠veis`);
                    console.log(`   üí° Para v√≠deos incorporados no slide, o PowerPoint s√≥ exp√µe`);
                    console.log(`      duration e currentTime quando:`);
                    console.log(`      ‚Ä¢ O v√≠deo est√° reproduzindo`);
                    console.log(`      ‚Ä¢ O slide est√° VIS√çVEL na tela (n√£o minimizado/oculto)`);
                    console.log(`   üí° Se o v√≠deo est√° tocando, mas ainda mostra 0, certifique-se`);
                    console.log(`      de que o slide est√° vis√≠vel e o v√≠deo est√° realmente tocando.`);
                }
                
                console.log(`   üîä Volume: ${(volume * 100).toFixed(0)}%`);
                console.log(`   üîá Mudo: ${muted ? 'Sim' : 'N√£o'}`);
                
                if (fileName) {
                    console.log(`   üìÅ Arquivo: ${fileName}`);
                }
                if (sourceUrl && sourceUrl !== fileName) {
                    console.log(`   üîó URL/Caminho: ${sourceUrl}`);
                } else if (!sourceUrl && fileName) {
                    console.log(`   üìù Nota: V√≠deo incorporado no slide (sem caminho externo)`);
                }
            }
        } else {
            console.log('\n‚ö†Ô∏è  Nenhuma informa√ß√£o de v√≠deo dispon√≠vel');
        }
    } else {
        console.log('\n‚ùå Erro:', result.error);
    }
} catch (error) {
    console.error('Erro ao executar:', error);
}


